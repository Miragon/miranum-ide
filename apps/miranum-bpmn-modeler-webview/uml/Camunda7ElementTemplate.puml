@startuml
class Camunda7ElementTemplate {
    - name : string
    - id : string
    - description? : string
    - version? : number
    - isDefault? : boolean
    - appliesTo : string[]
    - elementType? : ElementType
    - metadata? : Metadata
    - entriesVisible? : boolean
    - groups? : Group[]
    - documentationRef? : string
    - properties : Property[]
    - scopes? : Scope
}
note right of Camunda7ElementTemplate::appliesTo
    Pattern: "^[\\w\\d]+:[\\w\\d]+$"
end note
note right of Camunda7ElementTemplate::documentationRef
    Pattern: "^(https|http)://.*"
end note
Camunda7ElementTemplate::elementType -- ElementType
Camunda7ElementTemplate::groups -- Group
Camunda7ElementTemplate::metadata -- Metadata
Camunda7ElementTemplate::properties -- Property
Camunda7ElementTemplate::scopes -- Scope

class ElementType {
    - value : string
}
note right of ElementType::value
    Pattern: "^[\\w\\d]+:[\\w\\d]+$"
end note

class Metadata {}

class Group {
    - id : string
    - label : string
}

class Property {
    - id? : string
    - value? : string | boolean
    - description? : string
    - label? : string
    - type? : string
    - editable? : boolean
    - choices? : Choice[]
    - constraints? : Constraint
    - group? : string
    - condition? : Condition
    - binding : Binding
}
Property::choices -- Choice
Property::constraints -- Constraint
Property::condition -- Condition
Property::binding -- Binding

class Scope {}

class Choice {
    - name : string
    - value : string
}

class Constraint {
    - notEmpty : boolean
    - minLength? : number
    - maxLength? : number
    - pattern? : string | Pattern
}
Constraint::pattern -- Pattern

class Pattern {
    - value? : string
    - message? : string
}

interface Condition {}

class SingleCondition implements Condition {
    - type : string = "simple"
    - property : string
    - expression : Expression
}
SingleCondition::expression -- Expression

class MultipleCondition implements Condition {
    - allMatch : SingleCondition[]
}

interface Expression {}

class Equals implements Expression {
    - equals : string | number | boolean
}

class OneOf implements Expression {
    - oneOf : string[] | number[]
}

class Binding {
    - type : BindingType
    - name? : string
    - event? : string
    - scriptFormat? : string
    - source? : string
    - target? : string
    - expression? : boolean
    - variables? : Variable
    - sourceExpression? : string
}
Binding::type -- BindingType
Binding::variables -- Variable

enum BindingType {
    Property = "property"
    CamundaProperty = "camunda:property"
    CamundaInputParameter = "camunda:inputParameter"
    CamundaOutputParameter = "camunda:outputParameter"
    CamundaIn = "camunda:in"
    CamundaOut = "camunda:out"
    CamundaInBusinessKey = "camunda:in:businessKey"
    CamundaExecutionListener = "camunda:executionListener"
    CamundaField = "camunda:field"
    CamundaErrorEventDefinition = "camunda:errorEventDefinition"
}

enum Variable {
    All = "all"
    Local = "local"
}
@enduml
